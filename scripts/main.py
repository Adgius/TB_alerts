import os
import aiogram 
import time
import configparser

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from callback_func import *
from app_scrapper import *



BOT_COMMANDS = """
/****BOT_COMMANDS****/
/help - –≤—ã–∑–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏
/start - –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã
/fake_aleft - –≤—ã–∑–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π –∞–ª–µ—Ä—Ç
"""

bot = Bot(os.getenv('API_ID') + ':' + os.getenv('API_HASH'))
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

### START KEYBOARD ###

btn_alerts = KeyboardButton(text='‚ö†Ô∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã')
btn_gp = KeyboardButton(text='üö¨–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GooglePlay')
btn_as = KeyboardButton(text='üîµ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AppStore')
kb = [[btn_alerts], [btn_gp, btn_as]]
start_keyboard = ReplyKeyboardMarkup(kb)

######################

with open('whitelist.txt') as f:
	ws = [int(i.strip()) for i in f.readlines()]

def check_ws(func):
	async def wrapper(message: types.Message):
		if message.from_user.id in ws:
			await func(message)
		else:
			await bot.send_message(chat_id=message.from_user.id, text='‚ö† –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é. –ü–æ–ø—Ä–æ—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è')
	return wrapper
		
def logged(func):
	async def wrapper(message: types.Message):
		with open('log.txt', 'a', encoding='utf-8') as f:
		    f.write(f'{message.from_user.id} | {message.text} | {dt.datetime.now()}\n')
		await func(message)
	return wrapper


@dp.message_handler(commands=['help'])
@logged
@check_ws
async def help_command(message: types.Message):
	await bot.send_message(chat_id=message.from_user.id, text=BOT_COMMANDS)
	await message.delete()

@dp.message_handler(commands=['start'])
@logged
@check_ws
async def start_command(message: types.Message):
	await bot.send_message(chat_id=message.from_user.id, 
					   text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', 
					   reply_markup=start_keyboard)
	await message.delete()

@dp.message_handler(regexp='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã')
@logged
@check_ws
async def alerts_command(message: types.Message):
	await report_alerts(check_alerts_all(), message.from_user.id)

async def report_alerts(alerts: dict, chat_id: int):
	msg = f"""
	–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ GooglePlay {'‚úÖ' if not alerts['gp'] else '‚ùå'}\n
	–†–æ—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ GooglePlay {'‚úÖ' if not alerts['com_GP'] else '‚ùå'}\n
	–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ AppleStore {'‚úÖ' if not alerts['ap'] else '‚ùå'}\n
	–†–æ—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ AppleStore {'‚úÖ' if not alerts['com_AS'] else '‚ùå'}
	"""
	await bot.send_message(chat_id=chat_id, text=msg)



@dp.message_handler(regexp='üö¨–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GooglePlay')
@logged
@check_ws
async def gp_command(message: types.Message):
	start = time.time()
	table_manager(name='gp')
	await bot.send_photo(message.from_user.id, open('avg.png', "rb"), caption='–ú–æ–Ω–∏—Ç–æ—Ä–∏–≥ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞')
	await bot.send_photo(message.from_user.id, open('count.png', "rb"), caption='–ú–æ–Ω–∏—Ç–æ—Ä–∏–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤')
	print(time.time() - start)

@dp.message_handler(regexp='üîµ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AppStore')
@logged
@check_ws
async def as_command(message: types.Message):
	table_manager(name='ap')
	await bot.send_photo(message.from_user.id, open('avg.png', "rb"), caption='–ú–æ–Ω–∏—Ç–æ—Ä–∏–≥ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞')
	await bot.send_photo(message.from_user.id, open('count.png', "rb"), caption='–ú–æ–Ω–∏—Ç–æ—Ä–∏–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤')

@dp.message_handler()
@logged
@check_ws
async def message_logger(message: types.Message): 
	#handles other msg
	pass


###### SCHEDULER ########
def update_datasets():
	with open('log.txt', 'a', encoding='utf-8') as f:
		print('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö')
		f.write(f'–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö | {dt.datetime.now()}\n')
		save_df()
		scrap_reviews()
		print('–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω—á–µ–Ω–∞')
		f.write(f'–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω—á–µ–Ω–∞ | {dt.datetime.now()}\n')


def check_alerts():
	with open('log.txt', 'a', encoding='utf-8') as f:
		print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π')
		f.write(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π | {dt.datetime.now()}\n')
		res = check_alerts_all()
		if any(res.values()):
			report_alerts(res, 1491427573)

async def on_startup(_):
	scheduler.start()
	scheduler.add_job(update_datasets, "interval", hours=2)
	scheduler.add_job(check_alerts, "interval", hours=2)


########################

if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True, on_startup=on_startup)